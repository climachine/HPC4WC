"""
Example for workflow for gapfilling remote sensing data from diverse sources
Explicit stencil filter

sources:
http://numba.pydata.org/numba-doc/latest/user/stencil.html
https://examples.dask.org/applications/stencils-with-numba.html

    @author: verena bessenbacher
    @date: 12 06 2020
"""

import numpy as np
from datetime import datetime
import xarray as xr
import numba

@numba.stencil
def _nanmean(v, w):
    return (v[-1,0,0] * w[-1,0,0] + v[+1,0,0] * w[+1,0,0] + # middle 2d slice 1 point each dir
            v[0,-1,0] * w[0,-1,0] + v[0,+1,0] * w[0,+1,0] +
            v[-1,-1,0] * w[-1,-1,0] + v[+1,+1,0] * w[+1,+1,0] +
            v[-1,+1,0] * w[-1,+1,0] + v[+1,-1,0] * w[+1,-1,0] +

            v[-1,0,1] * w[-1,0,1] + v[+1,0,1] * w[+1,0,1] + # 2d slice before incl middle
            v[0,-1,1] * w[0,-1,1] + v[0,+1,1] * w[0,+1,1] +
            v[-1,-1,1] * w[-1,-1,1] + v[+1,+1,1] * w[+1,+1,1] +
            v[-1,+1,1] * w[-1,+1,1] + v[+1,-1,1] * w[+1,-1,1] +
            v[0,0,1] * w[0,0,1] +

            v[-1,0,-1] * w[-1,0,-1] + v[+1,0,-1] * w[+1,0,-1] + # 2d slice after incl middle
            v[0,-1,-1] * w[0,-1,-1] + v[0,+1,-1] * w[0,+1,-1] +
            v[-1,-1,-1] * w[-1,-1,-1] + v[+1,+1,-1] * w[+1,+1,-1] +
            v[-1,+1,-1] * w[-1,+1,-1] + v[+1,-1,-1] * w[+1,-1,-1] +
            v[0,0,-1] * w[0,0,-1] +
            
            v[-2,0,0] * w[-2,0,0] + v[+2,0,0] * w[+2,0,0] + # middle 2d slice 2 points l&r
            v[-2,-1,0] * w[-2,-1,0] + v[+2,-1,0] * w[+2,-1,0] +
            v[-2,-2,0] * w[-2,-2,0] + v[+2,-2,0] * w[+2,-2,0] +
            v[-2,1,0] * w[-2,1,0] + v[+2,1,0] * w[+2,1,0] +
            v[-2,2,0] * w[-2,2,0] + v[+2,2,0] * w[+2,2,0] +

            v[0,-2,0] * w[0,-2,0] + v[0,+2,0] * w[0,+2,0] + # middle 2d slice 2 points u&d
            v[-1,-2,0] * w[-1,-2,0] + v[-1,+2,0] * w[-1,+2,0] + 
            v[1,-2,0] * w[1,-2,0] + v[1,+2,0] * w[1,+2,0] + 

            v[-2,0,1] * w[-2,0,1] + v[+2,0,1] * w[+2,0,1] + # 2d slice before 2 points l&r
            v[-2,-1,1] * w[-2,-1,1] + v[+2,-1,1] * w[+2,-1,1] +
            v[-2,-2,1] * w[-2,-2,1] + v[+2,-2,1] * w[+2,-2,1] +
            v[-2,1,1] * w[-2,1,1] + v[+2,1,1] * w[+2,1,1] +
            v[-2,2,1] * w[-2,2,1] + v[+2,2,1] * w[+2,2,1] +

            v[0,-2,1] * w[0,-2,1] + v[0,+2,1] * w[0,+2,1] + # 2d slice before 2 points u&d
            v[-1,-2,1] * w[-1,-2,1] + v[-1,+2,1] * w[-1,+2,1] + 
            v[1,-2,1] * w[1,-2,1] + v[1,+2,1] * w[1,+2,1] + 

            v[-2,0,-1] * w[-2,0,-1] + v[+2,0,-1] * w[+2,0,-1] + # 2d slice after 2 points l&r
            v[-2,-1,-1] * w[-2,-1,-1] + v[+2,-1,-1] * w[+2,-1,-1] +
            v[-2,-2,-1] * w[-2,-2,-1] + v[+2,-2,-1] * w[+2,-2,-1] +
            v[-2,1,-1] * w[-2,1,-1] + v[+2,1,-1] * w[+2,1,-1] +
            v[-2,2,-1] * w[-2,2,-1] + v[+2,2,-1] * w[+2,2,-1] +

            v[0,-2,-1] * w[0,-2,-1] + v[0,+2,-1] * w[0,+2,-1] + # 2d slice after 2 points u&d
            v[-1,-2,-1] * w[-1,-2,-1] + v[-1,+2,-1] * w[-1,+2,-1] + 
            v[1,-2,-1] * w[1,-2,-1] + v[1,+2,-1] * w[1,+2,-1] + 
            
            v[-2,-2,-2] * w[-2,-2,-2] +
            v[-2,-1,-2] * w[-2,-1,-2] +
            v[-2,0,-2] * w[-2,0,-2] +
            v[-2,+1,-2] * w[-2,+1,-2] +
            v[-2,+2,-2] * w[-2,+2,-2] +

            v[-1,-2,-2] * w[-1,-2,-2] +
            v[-1,-1,-2] * w[-1,-1,-2] +
            v[-1,0,-2] * w[-1,0,-2] +
            v[-1,+1,-2] * w[-1,+1,-2] +
            v[-1,+2,-2] * w[-1,+2,-2] +

            v[0,-2,-2] * w[0,-2,-2] +
            v[0,-1,-2] * w[0,-1,-2] +
            v[0,0,-2] * w[0,0,-2] +
            v[0,+1,-2] * w[0,+1,-2] +
            v[0,+2,-2] * w[0,+2,-2] +

            v[+1,-2,-2] * w[+1,-2,-2] +
            v[+1,-1,-2] * w[+1,-1,-2] +
            v[+1,0,-2] * w[+1,0,-2] +
            v[+1,+1,-2] * w[+1,+1,-2] +
            v[+1,+2,-2] * w[+1,+2,-2] +

            v[+2,-2,-2] * w[+2,-2,-2] +
            v[+2,-1,-2] * w[+2,-1,-2] +
            v[+2,0,-2] * w[+2,0,-2] +
            v[+2,+1,-2] * w[+2,+1,-2] +
            v[+2,+2,-2] * w[+2,+2,-2] +
            
            v[-2,-2,2] * w[-2,-2,2] +
            v[-2,-1,2] * w[-2,-1,2] +
            v[-2,0,2] * w[-2,0,2] +
            v[-2,+1,2] * w[-2,+1,2] +
            v[-2,+2,2] * w[-2,+2,2] +

            v[-1,-2,2] * w[-1,-2,2] +
            v[-1,-1,2] * w[-1,-1,2] +
            v[-1,0,2] * w[-1,0,2] +
            v[-1,+1,2] * w[-1,+1,2] +
            v[-1,+2,2] * w[-1,+2,2] +

            v[0,-2,2] * w[0,-2,2] +
            v[0,-1,2] * w[0,-1,2] +
            v[0,0,2] * w[0,0,2] +
            v[0,+1,2] * w[0,+1,2] +
            v[0,+2,2] * w[0,+2,2] +

            v[+1,-2,2] * w[+1,-2,2] +
            v[+1,-1,2] * w[+1,-1,2] +
            v[+1,0,2] * w[+1,0,2] +
            v[+1,+1,2] * w[+1,+1,2] +
            v[+1,+2,2] * w[+1,+2,2] +

            v[+2,-2,2] * w[+2,-2,2] +
            v[+2,-1,2] * w[+2,-1,2] +
            v[+2,0,2] * w[+2,0,2] +
            v[+2,+1,2] * w[+2,+1,2] +
            v[+2,+2,2] * w[+2,+2,2] ) / max(w[-2,-2,2] +

            w[-2,-1,2] + w[-2,0,2] + w[-2,+1,2] + w[-2,+2,2] +
            w[-1,-2,2] + w[-1,-1,2] + w[-1,0,2] + w[-1,+1,2] + w[-1,+2,2] +
            w[0,-2,2] + w[0,-1,2] + w[0,0,2] + w[0,+1,2] + w[0,+2,2] +
            w[+1,-2,2] + w[+1,-1,2] + w[+1,0,2] + w[+1,+1,2] + w[+1,+2,2] +
            w[+2,-2,2] + w[+2,-1,2] + w[+2,0,2] + w[+2,+1,2] + w[+2,+2,2] + 

            w[-2,-2,1] + w[-2,-1,1] + w[-2,0,1] + w[-2,+1,1] + w[-2,+2,1] +
            w[-1,-2,1] + w[-1,-1,1] + w[-1,0,1] + w[-1,+1,1] + w[-1,+2,1] +
            w[0,-2,1] + w[0,-1,1] + w[0,0,1] + w[0,+1,1] + w[0,+2,1] +
            w[+1,-2,1] + w[+1,-1,1] + w[+1,0,1] + w[+1,+1,1] + w[+1,+2,1] +
            w[+2,-2,1] + w[+2,-1,1] + w[+2,0,1] + w[+2,+1,1] + w[+2,+2,1] + 

            w[-2,-2,0] + w[-2,-1,0] + w[-2,0,0] + w[-2,+1,0] + w[-2,+2,0] +
            w[-1,-2,0] + w[-1,-1,0] + w[-1,0,0] + w[-1,+1,0] + w[-1,+2,0] +
            w[0,-2,0] + w[0,-1,0] + w[0,+1,0] + w[0,+2,0] + # w/o point itself!
            w[+1,-2,0] + w[+1,-1,0] + w[+1,0,0] + w[+1,+1,0] + w[+1,+2,0] +
            w[+2,-2,0] + w[+2,-1,0] + w[+2,0,0] + w[+2,+1,0] + w[+2,+2,0] + 

            w[-2,-2,-1] + w[-2,-1,-1] + w[-2,0,-1] + w[-2,+1,-1] + w[-2,+2,-1] +
            w[-1,-2,-1] + w[-1,-1,-1] + w[-1,0,-1] + w[-1,+1,-1] + w[-1,+2,-1] +
            w[0,-2,-1] + w[0,-1,-1] + w[0,0,-1] + w[0,+1,-1] + w[0,+2,-1] +
            w[+1,-2,-1] + w[+1,-1,-1] + w[+1,0,-1] + w[+1,+1,-1] + w[+1,+2,-1] +
            w[+2,-2,-1] + w[+2,-1,-1] + w[+2,0,-1] + w[+2,+1,-1] + w[+2,+2,-1] + 

            w[-2,-2,-2] + w[-2,-1,-2] + w[-2,0,-2] + w[-2,+1,-2] + w[-2,+2,-2] +
            w[-1,-2,-2] + w[-1,-1,-2] + w[-1,0,-2] + w[-1,+1,-2] + w[-1,+2,-2] +
            w[0,-2,-2] + w[0,-1,-2] + w[0,0,-2] + w[0,+1,-2] + w[0,+2,-2] +
            w[+1,-2,-2] + w[+1,-1,-2] + w[+1,0,-2] + w[+1,+1,-2] + w[+1,+2,-2] +
            w[+2,-2,-2] + w[+2,-1,-2] + w[+2,0,-2] + w[+2,+1,-2] + w[+2,+2,-2],1)

@numba.stencil
def _weightsum(w):
    return (w[-2,-2,2] + w[-2,-1,2] + w[-2,0,2] + w[-2,+1,2] + w[-2,+2,2] +
            w[-1,-2,2] + w[-1,-1,2] + w[-1,0,2] + w[-1,+1,2] + w[-1,+2,2] +
            w[0,-2,2] + w[0,-1,2] + w[0,0,2] + w[0,+1,2] + w[0,+2,2] +
            w[+1,-2,2] + w[+1,-1,2] + w[+1,0,2] + w[+1,+1,2] + w[+1,+2,2] +
            w[+2,-2,2] + w[+2,-1,2] + w[+2,0,2] + w[+2,+1,2] + w[+2,+2,2] + 

            w[-2,-2,1] + w[-2,-1,1] + w[-2,0,1] + w[-2,+1,1] + w[-2,+2,1] +
            w[-1,-2,1] + w[-1,-1,1] + w[-1,0,1] + w[-1,+1,1] + w[-1,+2,1] +
            w[0,-2,1] + w[0,-1,1] + w[0,0,1] + w[0,+1,1] + w[0,+2,1] +
            w[+1,-2,1] + w[+1,-1,1] + w[+1,0,1] + w[+1,+1,1] + w[+1,+2,1] +
            w[+2,-2,1] + w[+2,-1,1] + w[+2,0,1] + w[+2,+1,1] + w[+2,+2,1] + 

            w[-2,-2,0] + w[-2,-1,0] + w[-2,0,0] + w[-2,+1,0] + w[-2,+2,0] +
            w[-1,-2,0] + w[-1,-1,0] + w[-1,0,0] + w[-1,+1,0] + w[-1,+2,0] +
            w[0,-2,0] + w[0,-1,0] + w[0,+1,0] + w[0,+2,0] + # w/o point itself!
            w[+1,-2,0] + w[+1,-1,0] + w[+1,0,0] + w[+1,+1,0] + w[+1,+2,0] +
            w[+2,-2,0] + w[+2,-1,0] + w[+2,0,0] + w[+2,+1,0] + w[+2,+2,0] + 

            w[-2,-2,-1] + w[-2,-1,-1] + w[-2,0,-1] + w[-2,+1,-1] + w[-2,+2,-1] +
            w[-1,-2,-1] + w[-1,-1,-1] + w[-1,0,-1] + w[-1,+1,-1] + w[-1,+2,-1] +
            w[0,-2,-1] + w[0,-1,-1] + w[0,0,-1] + w[0,+1,-1] + w[0,+2,-1] +
            w[+1,-2,-1] + w[+1,-1,-1] + w[+1,0,-1] + w[+1,+1,-1] + w[+1,+2,-1] +
            w[+2,-2,-1] + w[+2,-1,-1] + w[+2,0,-1] + w[+2,+1,-1] + w[+2,+2,-1] + 

            w[-2,-2,-2] + w[-2,-1,-2] + w[-2,0,-2] + w[-2,+1,-2] + w[-2,+2,-2] +
            w[-1,-2,-2] + w[-1,-1,-2] + w[-1,0,-2] + w[-1,+1,-2] + w[-1,+2,-2] +
            w[0,-2,-2] + w[0,-1,-2] + w[0,0,-2] + w[0,+1,-2] + w[0,+2,-2] +
            w[+1,-2,-2] + w[+1,-1,-2] + w[+1,0,-2] + w[+1,+1,-2] + w[+1,+2,-2] +
            w[+2,-2,-2] + w[+2,-1,-2] + w[+2,0,-2] + w[+2,+1,-2] + w[+2,+2,-2])

@numba.stencil
def _nanmean_simple(v, w):
    return (v[-1,0,0] * w[-1,0,0] + v[+1,0,0] * w[+1,0,0] +
            v[0,-1,0] * w[0,-1,0] + v[0,+1,0] * w[0,+1,0] +
            v[-1,-1,0] * w[-1,-1,0] + v[+1,+1,0] * w[+1,+1,0] +
            v[-1,+1,0] * w[-1,+1,0] + v[+1,-1,0] * w[+1,-1,0] +

            v[-1,0,1] * w[-1,0,1] + v[+1,0,1] * w[+1,0,1] +
            v[0,-1,1] * w[0,-1,1] + v[0,+1,1] * w[0,+1,1] +
            v[-1,-1,1] * w[-1,-1,1] + v[+1,+1,1] * w[+1,+1,1] +
            v[-1,+1,1] * w[-1,+1,1] + v[+1,-1,1] * w[+1,-1,1] +
            v[0,0,1] * w[0,0,1] +

            v[-1,0,-1] * w[-1,0,-1] + v[+1,0,-1] * w[+1,0,-1] +
            v[0,-1,-1] * w[0,-1,-1] + v[0,+1,-1] * w[0,+1,-1] +
            v[-1,-1,-1] * w[-1,-1,-1] + v[+1,+1,-1] * w[+1,+1,-1] +
            v[-1,+1,-1] * w[-1,+1,-1] + v[+1,-1,-1] * w[+1,-1,-1] +
            v[0,0,-1] * w[0,0,-1]) #/ max(w[-1,0,0] + 
            
            #w[+1,0,0] + w[0,-1,0] + w[0,+1,0] +
            #w[-1,-1,0] + w[+1,+1,0] + w[-1,+1,0] + w[+1,-1,0] +

            #w[-1,0,1] + w[+1,0,1] + w[0,-1,1] + w[0,+1,1] +
            #w[-1,-1,1] + w[+1,+1,1] + w[-1,+1,1] + w[+1,-1,1] +
            #w[0,0,1] +

            #w[-1,0,-1] + w[+1,0,-1] + w[0,-1,-1] + w[0,+1,-1] +
            #w[-1,-1,-1] + w[+1,+1,-1] + w[-1,+1,-1] + w[+1,-1,-1] +
            #w[0,0,-1],1)

@numba.stencil
def _debug(v, w):
    return (v[0,0,0] * w[0,0,0] + v[-1,0,0] * w[-1,0,0])

@numba.njit
def nanmean(v,w):
    return _nanmean(v,w)

@numba.njit
def nanmean_simple(v,w):
    return _nanmean_simple(v,w)

@numba.njit
def weightsum(w):
    return _weightsum(w)
